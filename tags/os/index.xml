<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>os on 云原生驿站</title>
    <link>/tags/os/</link>
    <description>Recent content in os on 云原生驿站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2022 云原生驿站
</copyright>
    <lastBuildDate>Sat, 29 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KVM的内存气球控制技术</title>
      <link>/posts/kvm-memory-balloon-control-technology/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/kvm-memory-balloon-control-technology/</guid>
      <description>前言 KVM的内存气球技术使得可以在虚拟机中按照需要调整的内存大小，提升内存的利用率。使用的时候，默认情况是需要安装virt balloon的驱动，内核开启CONFIG_VIRTIO_BALLOON。CentOS7默认已经开启了此选项，并且也安装了virtballoon驱动。
1.安装启动KVM虚机 virt-install --name virtballoon-test --memory 8192 --disk CentOS7.8.raw,format=qcow2 \ &amp;gt; --import --os-type=linux --network bridge=brq899ea5be-a3,model=virtio \ &amp;gt; --graphics vnc,listen=0.0.0.0 --noautoconsole WARNING 未检测到操作系统，虚拟机性能可能会受到影响。使用 --os-variant 选项指定操作系统以获得最佳性能。 开始安装...... 域创建完成。  2.验证使用 virsh edit virtballoon-test  编辑KVM的xml,可以看到一下内存膨胀模块
&amp;lt;memballoon model=&#39;virtio&#39;&amp;gt; &amp;lt;address type=&#39;pci&#39; domain=&#39;0x0000&#39; bus=&#39;0x00&#39; slot=&#39;0x05&#39; function=&#39;0x0&#39;/&amp;gt; &amp;lt;/memballoon&amp;gt;  balloon有两种类型：
膨胀：虚拟机的内存被拿掉给宿主机
压缩：宿主机的内存还给虚拟机
气球技术最大优点是内存可以超用，缺点是可能造成内存不够用的而影响性能
查看当前内存 virsh vncdisplay virtballoon-test  然后使用vnc连接宿主机的ip + vncdisplay出来的端口即可
![image-20220129144953976](/Users/wudianqiu/Library/Application Support/typora-user-images/image-20220129144953976.png)
不关机情况下，我们直接使用内存气球跳转一下内存
virsh qemu-monitor-command virtballoon-test --hmp --cmd balloon 4096  再次查看一下虚机当中的内存
![image-20220129145159494](/Users/wudianqiu/Library/Application Support/typora-user-images/image-20220129145159494.png)
在宿主机也是可以直接查看到的
virsh qemu-monitor-command virtballoon-test --hmp --cmd info balloon balloon: actual=4096  压缩测试了，那膨胀就顺便测一下吧</description>
    </item>
    
    <item>
      <title>伪共享在多核架构并发下所带来的问题</title>
      <link>/posts/problems-with-pseudo-sharing-in-concurrent-multi-core-architectures/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/problems-with-pseudo-sharing-in-concurrent-multi-core-architectures/</guid>
      <description>1.多核架构下的缓存架构 主流的多核处理器均采用共享内存，但访问内存耗时较长，因此在CPU和内存之间设立了高速缓存，一个典型的高速缓存架构如图所示，分为L1、L2、L3 Cache。
 多个核心对同一缓存行的高频修改会导致严重的性能开销，影响多核的可扩展性。由于缓存一致性协议同一时刻只允许一个核心独占修改该缓存行，会造成多核执行流串行化，无法充分发挥出多核的性能优势；此外，多个核心对于同一缓存行的高频修改还会导致高速互联总线中产生大量缓存一致性流量，从而造成性能瓶颈。 伪共享(False Sharing)。伪共享是指本身无需在多核之间共享的内容被错误地划分到同一个缓存行中，并引起了多核环境下对于单一缓存行的竞争，从而导致无谓的性能开销。  2.缓存一致性 Cache 一致性协议 Cache的一致性要解决的问题可以用以下情况简要表达：
处理器A与处理器B分别拥有地址为0x0000000F的数据的缓存100。当T1时刻，处理器A修改了100为101，但是没有写回主存。当T2时刻，处理器B取地址A的数据并将其+1。当T3时候，处理器A与处理器B都进行写回。
这个简单的流程中，出现了几个严重的问题：
在T2时刻，处理器B读取地址A的数据不是最新的数据。 在T3时刻，如果没有一个一致性协议来维护的话，这时候就出现了三个版本的地址A的值：100,101,102。写回后也无法预测内容中保存的值为多少。
涉及到这种多处理器共享存储器的情况，有两个概念来保证其数据的正确：
 一致性（coherence） 一致性用于保证在一个处理器写了数据之后，另外的处理器读取的数据是写入的数据。包括了写入操作可串行化等。 连贯性（consistency）连贯性确定了一个写入值什么时候能够被看到。  类似读写锁，多个处理器拥有同一地址的数据的缓存，如果仅仅进行读操作的话，不会导致任何问题。但是一旦进行写，问题就出现了。传统读写锁的解决方法是阻塞新的读，并等待现在的读完了再进行写操作，这是一种趋向被动的思路，被动等所有读者读完后才开始写。但是缓存中无法判断是否一个缓存块已经读完，只有在被当成victim的时候换出去的时候才能察觉。很显然这种被动的策略是不科学的。针对缓存这种场景，应该设计一种主动告知的方法，告诉其他处理器这块缓存块已经更新了，不能继续从里面读取数据，而是需要想办法来取到这个地址的最新值。
缓存一致性模型就是顺着这个思路，设计了两种主动告知的策略：监听式（Snooping Coherence Protocals) 与 目录式 (Directory Protocol)。
监听式（Snooping Coherence Protocals) 监听式一致性协议是利用总线广播 (broadcast) 机制来实现的, 是Cache一致性协议最早的实现方式.系统中的所有高速缓存控制器都需要侦听系统中的一致性消息, 以此来确定是否有一致性请求.最为经典的监听式一致性协议是MESI。
目录式 (Directory Protocol) 目录一致性协议使用目录来全局记录缓存状态, 包括数据的共享者列表、一致性状态等.在目录一致性协议中, 目录充当了定序点的角色.消息的传输是以点对点的方式进行的, 即, 所有一致性消息通过一个目录结构来转发处理, 因此, 它可以有效地降低一致性消息对网络带宽的需求。
经典的一致性协议-MESI协议
MESI协议也称为Illinois MESI协议, 是一种非常典型的缓存一致性协议.协议以缓存块的4种状态命名.
 失效（Invalid）缓存段，要么已经不在缓存中，要么它的内容已经过时。为了达到缓存的目的，这种状态的段将会被忽略。一旦缓存段被标记为失效，那效果就等同于它从来没被加载到缓存中。 共享（Shared）缓存段，它是和主内存内容保持一致的一份拷贝，在这种状态下的缓存段只能被读取，不能被写入。多组缓存可以同时拥有针对同一内存地址的共享缓存段，这就是名称的由来。 独占（Exclusive）缓存段，和S状态一样，也是和主内存内容保持一致的一份拷贝。区别在于，如果一个处理器持有了某个E状态的缓存段，那其他处理器就不能同时持有它，所以叫“独占”。这意味着，如果其他处理器原本也持有同一缓存段，那么它会马上变成“失效”状态。 已修改（Modified）缓存段，属于脏段，它们已经被所属的处理器修改了。如果一个段处于已修改状态，那么它在其他处理器缓存中的拷贝马上会变成失效状态，这个规律和E状态一样。此外，已修改缓存段如果被丢弃或标记为失效，那么先要把它的内容回写到内存中——这和回写模式下常规的脏段处理方式一样。  MESI协议是一个合适的状态机，既能处理来自本地处理器的请求，也能把信息广播到总线上。这里强调两点：
 在多核系统中，读取某个缓存段，实际上会牵涉到和其他处理器的通讯，并且可能导致它们发生内存传输。写某个缓存段需要多个步骤：在你写任何东西之前，你首先要获得独占权，以及所请求的缓存段的当前内容的拷贝（所谓的“带权限获取的读（Read For Ownership）”请求）。 尽管我们为了一致性问题做了额外的工作，但是最终结果还是非常有保证的。即它遵守 MESI定律：在所有的脏缓存段（M状态）被回写后，任意缓存级别的所有缓存段中的内容，和它们对应的内存中的内容一致。此外，在任意时刻，当某个位置的内存被一个处理器加载为独占缓存段时（E状态），那它就不会再出现在其他任何处理器的缓存中。  注意，这其实就是回写定律加上独占规则而已。其实MESI协议或多核系统的存在根本没有弱化我们现有的内存模型。
3.伪共享 CPU缓存是以缓存行（Cache line）为最小数据单位，缓存行是2的整数幂个连续字节，主流大小是64个字节。如果多个变量同属于一个缓存行，在并发环境下同时修改，因为写屏障及内存一致性协议会导致同一时间只能一个线程操作该缓存行，进而因为竞争导致性能下降，这就是“伪共享”。“伪共享”是高并发场景下一个底层细节问题。
线程 0 和线程 1 会用到不同变量，它们在内存中彼此相邻，并驻留在同一高速缓存块（Cache Block，或Cache Line）。 高速缓存行被加载到 CPU 0 和 CPU 1 的高速缓存中（灰色箭头）。 尽管这些线程修改的是不同变量（红色和蓝色箭头），高速缓存行（Cache Block，或Cache Line）仍会无效，并强制内存更新以维持高速缓存的一致性，这会降低应用性能。</description>
    </item>
    
  </channel>
</rss>
